
Опис:
Декоратор (англ. Decorator) — структурный шаблон проектирования, предназначенный для динамического подключения
дополнительного поведения к объекту. Гнучка альтернатива створення підкласів,
оскільки додатковий функціонал підключається через класи імпламентатори спільного інтерейсу.
___________
Реалізація:
1. Є інтерфейс PrinterInterface з методом print();
2. Є клас Printer, який реалізує PrinterInterface;
3. Є абстрактний клас Decorator, який імплементує PrinterInterface.
Має  PrinterInterface поле, реалізовує метод print(): викликає цей метод у PrinterInterface обєкта
4. Є три класи: QuotesDecorator, LeftBracketDecorator, RightBracketDecorator, які
"extends Decorator implements PrinterInterface"
5. В методі main створюється силка типу PrinterInterface, яка ініціалізується таким чином, що в довільній комбінації
створює класи пункту 4, передаши на вхід обєкт типу Printer.
___________
Використання:
1) Объект, который предполагается использовать, выполняет основные функции. Однако может потребоваться добавить
к нему некоторую дополнительную функциональность, которая будет выполняться до, после или даже вместо
 основной функциональности объекта.
2) Добавляемая функциональность реализуется в небольших объектах. Преимущество состоит в возможности динамически
добавлять эту функциональность до или после основной функциональности объекта
3) Драйверы-фильтры в ядре Windows (архитектура WDM (Windows Driver Model)) представляют собой декораторы.
Несмотря на то, что WDM реализована на не-объектном языке Си, в ней четко прослеживаются паттерны проектирования —
 декоратор, цепочка ответственности, и команда (объект IRP).